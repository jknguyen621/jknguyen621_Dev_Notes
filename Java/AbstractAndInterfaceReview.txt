//Abstracts & Interfaces in JAVA:


Polymorphism: Program in general rather than specific. Enables us to write programs that process objects that share the same superclass
			in a class hierarchy as if they are all objects of the superclass; this can simplify programming.  Easily extensible.
			When a program invokes a method through a superclass variable - at execution time, the correct subclass version of the method is called, based 
			on the type of reference stored in the superclass variable.  This is done by instantiate an object of the subclass ad 

Rules:
- A class can inherit from only one superclass, but can implement one or more interfaces (commas between interfaces):
    - Public class ClassName extends SuperclassName implements FirstInterface, SecondInterface, ThirdInterfacd {…}


Final methods and Classes:
- Private methods are implicitly final.
- Static methods are implicitly final.
- A final method declaration can never be changed.
- A final method in superclass can’t be overridden in subclass.
- Calls to final methods are resolved at compile time - known as static binding.


====================================================================================================

Abstract:
- Declares common attributes and behaviors of the various classes in a class hiearchy.
- never intended to insatiate objects, rather use as superclass for inheritance.\
- To share a common design to its subclasses.
- Concrete classes are ones that inherited the abstract superclass and implements every methods declared.
- Can constitute several levels of the hierarchy.
- Has keyword abstract in front of the class name. i.e.: public abstract void draw();  //abstract method
- A class with only one abstract method must be declared as abstract, unless all methods are implemented concretely.
- Constructors and static methods can’t be declared abstract.
- ** We can use abstract superclasses to declare variables that an hold references to objects of any concrete class derived from those abstract superclasses.
    - Program typically use such variables to manipulate subclass objects polymorphically.
- References of subclasses can be loaded to an array of elements of the abstract class. 
    - Then iterate through the array to check if element is an ‘instance’ a specific subclass.
    - Next, down cast that array element of the abstract class to that specific subclass (subclass) in order to use the subclass’ methods.
    - Failing to down cast will yield a compile error when trying to invoke those subclass methods.
- 

i.e.: An abstract superclass Employee declares the “interface” to the hierarchy.

public abstract class Employee
{
	private String firstName;
	private String lastName;
	private socialSecurityNumber;

	public Employee(String first, String last, String ssn)
	{
		firstName = first;
		lastName = last;
		socialSecurityNumber = ssn;
		
	}
	
	public abstract double earnings();			//no implementation, will get override by subclass.
}

To use an abstract:
Is-a relationship

public class SalariedEmployee extends Employee
{
	private double weeklySalary;

	public SalariedEmployee(String first, String last, String San, double salary)
	{
		super(first, last, ssn);  //pass to Employee constructor
		setWeeklySalary(salary);
	}

	//override abstract method earnings in Employee
	public double earnings()
	{
		return getWeeklySalary();
	}
}


====================================================================================================

Interfaces:
- Java offers a capability that requires that unrelated classes implement a set of common methods and constants. 
    - This allows objects of unrelated classes to be processed polymorphically.
- Define and standardize the ways in which things such as people and systems can interact with one another.
- Specifies what operations are permitted to users to perform but does not specify how the operation are performed.
- Contains keyword interface and contains only constants and abstract methods.
- All members of interface must be public.
- All methods in interfaces are implicitly public abstract  (not concrete defined)
- All fields are implicitly public, static, and final.
- To use, a concrete class must specify to implements the interface and must implement all the methods declared in the interface, otherwise, must declare the class itself as abstract.
- A class can refer to the constants defined in the interface directly by importing the interface as static import. i.e. import static packageName.ClassName.*;

ie.: 

public interface Payable   	//optional public abstract 
{       float PI = 3.143472;        //optional can also be public static final
	double getPaymentAmount();      //No implementation
}

To use an interface:
Is-a relationship

//Invoice class implements Payable Interface
public class Invoice implements Payable
{
	private String partNumber;
	private String partDescription;
	private int quantity;
	private double pricePerItem;

	//four-args constructor
	public Invoice(String part, String description, int count, double price)
	{
		partNumber = part;
		partDescription = description;
		SetQuantity(count);
		SetPricePerItem(price);
	}

	public int getQuanity()
	{
		return quantity;
	}

	//required method to fulfilled the interface contract with the compiler.
	public double getPaymentAmount()
	{
		return getQuanity * getPricePerItem();
	}
}
